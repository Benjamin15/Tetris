#!/usr/bin/env node

const io = require('socket.io-client');

async function testLinesAttack() {
  console.log('üß™ Test Sp√©cifique - Envoi de Lignes d\'Attaque');
  console.log('==============================================\n');
  
  const serverUrl = 'http://localhost:3002';
  const player1 = io(serverUrl, { transports: ['polling'] });
  const player2 = io(serverUrl, { transports: ['polling'] });
  
  let roomId = null;
  let attacksReceived = [];
  
  // Player 1 setup
  player1.on('connect', () => {
    console.log('‚úÖ Joueur 1 connect√©');
    player1.emit('joinQueue', { username: 'AttackTester1' });
  });
  
  // Player 2 setup
  player2.on('connect', () => {
    console.log('‚úÖ Joueur 2 connect√©');
    setTimeout(() => {
      player2.emit('joinQueue', { username: 'AttackTester2' });
    }, 500);
  });
  
  // Match found events
  player1.on('matchFound', (data) => {
    console.log('üéØ Joueur 1 - Match trouv√©, room:', data.roomId);
    roomId = data.roomId;
    player1.emit('joinRoom', { roomId: data.roomId });
  });
  
  player2.on('matchFound', (data) => {
    console.log('üéØ Joueur 2 - Match trouv√©, room:', data.roomId);
    player2.emit('joinRoom', { roomId: data.roomId });
  });
  
  // Game start events
  player1.on('gameStart', () => {
    console.log('üöÄ Joueur 1 - Partie d√©marr√©e');
    
    // Test de diff√©rents types d'attaques
    setTimeout(() => {
      console.log('\nüí• Joueur 1 - Test 1 ligne supprim√©e (simple)');
      player1.emit('sendAttack', {
        roomId: roomId,
        playerId: player1.id,
        lines: 1  // 1 ligne supprim√©e (sera converti c√¥t√© serveur)
      });
    }, 4000); // Attendre que le jeu soit en 'playing'
    
    setTimeout(() => {
      console.log('üí• Joueur 1 - Test 2 lignes supprim√©es (double)');
      player1.emit('sendAttack', {
        roomId: roomId,
        playerId: player1.id,
        lines: 2  // 2 lignes supprim√©es (sera converti c√¥t√© serveur)
      });
    }, 5000);
    
    setTimeout(() => {
      console.log('üí• Joueur 1 - Test 3 lignes supprim√©es (triple)');
      player1.emit('sendAttack', {
        roomId: roomId,
        playerId: player1.id,
        lines: 3  // 3 lignes supprim√©es (sera converti c√¥t√© serveur)
      });
    }, 6000);
    
    setTimeout(() => {
      console.log('üí• Joueur 1 - Test 4 lignes supprim√©es (tetris)');
      player1.emit('sendAttack', {
        roomId: roomId,
        playerId: player1.id,
        lines: 4  // 4 lignes supprim√©es (sera converti c√¥t√© serveur)
      });
    }, 7000);
  });
  
  player2.on('gameStart', () => {
    console.log('üöÄ Joueur 2 - Partie d√©marr√©e');
  });
  
  // Attack received events
  player2.on('attackReceived', (data) => {
    console.log(`üí• Joueur 2 - ATTAQUE RE√áUE:`, data);
    attacksReceived.push(data);
  });
  
  player1.on('attackReceived', (data) => {
    console.log(`üí• Joueur 1 - ATTAQUE RE√áUE:`, data);
    attacksReceived.push(data);
  });
  
  // Analyse des r√©sultats apr√®s 9 secondes
  setTimeout(() => {
    console.log('\nüìä R√âSULTATS DU TEST');
    console.log('===================');
    console.log(`Attaques envoy√©es: 4`);
    console.log(`Attaques re√ßues: ${attacksReceived.length}`);
    
    if (attacksReceived.length > 0) {
      console.log('\n‚úÖ D√©tails des attaques re√ßues:');
      attacksReceived.forEach((attack, index) => {
        console.log(`  ${index + 1}. ${attack.lines} lignes de ${attack.from}`);
      });
    } else {
      console.log('\n‚ùå AUCUNE ATTAQUE RE√áUE - Probl√®me d√©tect√© !');
    }
    
    // Nettoyage
    player1.disconnect();
    player2.disconnect();
    process.exit(0);
  }, 9000);
}

testLinesAttack().catch(console.error);
